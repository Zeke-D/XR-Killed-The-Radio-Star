#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.60.4)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["SkySphere", "Move", "Ground", "ScreenTransform", "Lights"]
    def "SkySphere" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 0, 0)
        }
        references = @../SkySphere.usdz@
    )
    {
        reorder nameChildren = ["SkySphere_mat", "Screen", "Ground"]
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)

        over "SkySphere_mat"
        {
            asset inputs:SkySphere_Texture = @../NightSky.jpg@
        }
    }

    def RealityKitTimeline "Move"
    {
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Transform_To"
            {
                string actionKind = "moveTo"
                int blendLayer = 300
                double duration = 19.619186705962562
                uniform token info:id = "23DECCD2-0CCC-4FFE-A4AF-774CC88ADC78"
                float3 position = (0, 1.8407302, 1.2326125)
                quatf rotation = (1, 0, 0, 0)
                float3 scale = (10, 6.666667, 0.015384615)
                double startTime = 2.007476662027129
                rel target = </Root/ScreenTransform/Screen>

                def RealityKitStruct "transformMode"
                {
                    rel referenceEntity = </Root>
                    token type = "parent"
                }

                def RealityKitStruct "timingFunction"
                {
                    token type = "easeIn"
                }
            }
        }
    }

    def "Ground" (
        prepend apiSchemas = ["MaterialBindingAPI"]
        references = @../Ground.usda@
    )
    {
        reorder nameChildren = ["Mesh", "Material"]
        rel material:binding = </Root/Ground/Material> (
            bindMaterialAs = "strongerThanDescendants"
        )
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 1.1, 0)

        over "Material"
        {
            over "Reflection_Diffuse"
            {
                int ui:nodegraph:node:stackingOrder = 218
            }

            over "Read_EmissionUV"
            {
                float2 ui:nodegraph:node:pos = (-25.453125, 66.01953)
                int ui:nodegraph:node:stackingOrder = 226
            }

            over "Read_AttenuationUV"
            {
                float2 ui:nodegraph:node:pos = (-262.01172, 193.9336)
                int ui:nodegraph:node:stackingOrder = 307
            }
        }
    }

    def Xform "ScreenTransform" (
        active = true
    )
    {
        def Cube "Screen" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["RCP_BehaviorsContainer", "Material", "OnAddedToScene"]
            rel material:binding = </Root/ScreenTransform/Screen/Material> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 0.2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (10, 6.666667, 0.015384615)
            float3 xformOp:translate = (0, 1.8380948, -0.92672354)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "RCP_BehaviorsContainer"
            {
                rel behaviors = </Root/ScreenTransform/Screen/OnAddedToScene>
                uniform token info:id = "RCP.BehaviorsContainer"
            }

            def Preliminary_Behavior "OnAddedToScene"
            {
                rel actions = </Root/ScreenTransform/Screen/OnAddedToScene/Action>
                uniform bool exclusive
                rel triggers = </Root/ScreenTransform/Screen/OnAddedToScene/Trigger>

                def Preliminary_Trigger "Trigger"
                {
                    rel affectedObjects = </Root/ScreenTransform/Screen>
                    token info:id = "SceneTransition"
                }

                def Preliminary_Action "Action"
                {
                    rel affectedObjects = </Root>
                    rel animationLibraryKey = </Root/Move>
                    rel animationLibraryKeyOverrideKey = </Root/ScreenTransform/Screen/OnAddedToScene/Trigger>
                    token info:id = "PlayTimeline"
                    int loops = 0
                    int performCount = 1
                    token type = "serial"
                }
            }

            def Material "Material"
            {
                token outputs:mtlx:surface.connect = </Root/ScreenTransform/Screen/Material/PreviewSurface.outputs:out>
                token outputs:realitykit:vertex
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.5, 100.5)

                def Shader "PreviewSurface"
                {
                    uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                    float inputs:clearcoat = 1
                    color3f inputs:diffuseColor = (0, 0, 0) (
                        colorSpace = "srgb_texture"
                    )
                    float inputs:metallic = 0.2
                    token outputs:out
                    float2 ui:nodegraph:node:pos = (93.5, 100.5)
                    int ui:nodegraph:node:stackingOrder = 6
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["Advanced"]
                }
            }
        }
    }

    def Xform "Lights"
    {
        def Xform "PointLight"
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (-1.69173, 1.5038122, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "PointLight"
            {
                float3 color = (0.8076743, 1, 0.9545373)
                token info:id = "RealityKit.PointLight"
            }
        }

        def Xform "PointLight_1"
        {
            float2 ui:nodegraph:node:pos = (216, 104.5)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (-0.33015525, 1.5038122, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "PointLight"
            {
                float3 color = (1, 0.88081515, 0.6541668)
                token info:id = "RealityKit.PointLight"
                float intensity = 50000
            }
        }

        def Xform "PointLight_2"
        {
            float2 ui:nodegraph:node:pos = (236, 124.5)
            int ui:nodegraph:node:stackingOrder = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0.86250377, 1.5038122, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "PointLight"
            {
                float3 color = (1, 0.88081515, 0.6541668)
                token info:id = "RealityKit.PointLight"
                float intensity = 50000
            }
        }

        def Xform "PointLight_3"
        {
            float2 ui:nodegraph:node:pos = (256, 144.5)
            int ui:nodegraph:node:stackingOrder = 3
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (1.7023833, 1.5038122, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "PointLight"
            {
                float3 color = (0.8076743, 1, 0.9545373)
                token info:id = "RealityKit.PointLight"
            }
        }
    }
}

