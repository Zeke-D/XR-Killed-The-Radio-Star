#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.60.4)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["SkySphere", "Move", "Ground", "ScreenTransform", "Lights", "Theatre", "IBL"]
    def "SkySphere" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 0, 0)
        }
        references = @../SkySphere.usdz@
    )
    {
        reorder nameChildren = ["SkySphere_mat", "Screen", "Ground"]
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)

        over "SkySphere_mat"
        {
            asset inputs:SkySphere_Texture = @../NightSky.jpg@
        }
    }

    def RealityKitTimeline "Move"
    {
        def RealityKitTrack "Track"
        {
        }
    }

    def "Ground" (
        active = false
        prepend apiSchemas = ["MaterialBindingAPI"]
        references = @../Ground.usda@
    )
    {
        reorder nameChildren = ["Mesh", "Material"]
        rel material:binding = </Root/Ground/Material> (
            bindMaterialAs = "strongerThanDescendants"
        )
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 1.1, 0)

        over "Material"
        {
            over "Reflection_Diffuse"
            {
                int ui:nodegraph:node:stackingOrder = 218
            }

            over "Read_EmissionUV"
            {
                float2 ui:nodegraph:node:pos = (-25.453125, 66.01953)
                int ui:nodegraph:node:stackingOrder = 226
            }

            over "Read_AttenuationUV"
            {
                float2 ui:nodegraph:node:pos = (-262.01172, 193.9336)
                int ui:nodegraph:node:stackingOrder = 307
            }
        }
    }

    def Xform "ScreenTransform" (
        active = true
    )
    {
        def Cube "Screen" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["RCP_BehaviorsContainer", "Material", "OnAddedToScene"]
            rel material:binding = </Root/ScreenTransform/Screen/Material> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 0.2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (20, 13.333334, 0.03076923)
            float3 xformOp:translate = (0, -0.50631905, -7.082741)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "RCP_BehaviorsContainer"
            {
                rel behaviors = </Root/ScreenTransform/Screen/OnAddedToScene>
                uniform token info:id = "RCP.BehaviorsContainer"
            }

            def Preliminary_Behavior "OnAddedToScene"
            {
                rel actions = </Root/ScreenTransform/Screen/OnAddedToScene/Action>
                uniform bool exclusive
                rel triggers = </Root/ScreenTransform/Screen/OnAddedToScene/Trigger>

                def Preliminary_Trigger "Trigger"
                {
                    rel affectedObjects = </Root/ScreenTransform/Screen>
                    token info:id = "SceneTransition"
                }

                def Preliminary_Action "Action"
                {
                    rel affectedObjects = </Root>
                    rel animationLibraryKey = </Root/Move>
                    rel animationLibraryKeyOverrideKey = </Root/ScreenTransform/Screen/OnAddedToScene/Trigger>
                    token info:id = "PlayTimeline"
                    int loops = 0
                    int performCount = 1
                    token type = "serial"
                }
            }

            def Material "Material"
            {
                token outputs:mtlx:surface.connect = </Root/ScreenTransform/Screen/Material/PreviewSurface.outputs:out>
                token outputs:realitykit:vertex
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.5, 100.5)

                def Shader "PreviewSurface"
                {
                    uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                    float inputs:clearcoat = 1
                    color3f inputs:diffuseColor = (0, 0, 0) (
                        colorSpace = "srgb_texture"
                    )
                    float inputs:metallic = 0.2
                    token outputs:out
                    float2 ui:nodegraph:node:pos = (93.5, 100.5)
                    int ui:nodegraph:node:stackingOrder = 6
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["Advanced"]
                }
            }
        }
    }

    def Xform "Lights"
    {
        float3 xformOp:translate = (0, 2.7760584, 3.4430573)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Xform "PointLight"
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (-1.69173, 1.5038122, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "PointLight"
            {
                float3 color = (0.8076743, 1, 0.9545373)
                token info:id = "RealityKit.PointLight"
                float intensity = 100000
            }
        }

        def Xform "PointLight_1"
        {
            float2 ui:nodegraph:node:pos = (216, 104.5)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (-0.33015525, 1.5038122, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "PointLight"
            {
                float3 color = (1, 0.88081515, 0.6541668)
                token info:id = "RealityKit.PointLight"
                float intensity = 100000
            }
        }

        def Xform "PointLight_2"
        {
            float2 ui:nodegraph:node:pos = (236, 124.5)
            int ui:nodegraph:node:stackingOrder = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0.86250377, 1.5038122, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "PointLight"
            {
                float3 color = (1, 0.88081515, 0.6541668)
                token info:id = "RealityKit.PointLight"
                float intensity = 100000
            }
        }

        def Xform "PointLight_3"
        {
            float2 ui:nodegraph:node:pos = (256, 144.5)
            int ui:nodegraph:node:stackingOrder = 3
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (1.7023833, 1.5038122, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "PointLight"
            {
                float3 color = (0.8076743, 1, 0.9545373)
                token info:id = "RealityKit.PointLight"
                float intensity = 100000
            }
        }

        def Xform "PointLight_4"
        {
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (-1.69173, -0.9526756, -10.241348)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "PointLight"
            {
                float3 color = (0.8076743, 1, 0.9545373)
                token info:id = "RealityKit.PointLight"
                float intensity = 100000
            }
        }

        def Xform "PointLight_5"
        {
            float2 ui:nodegraph:node:pos = (236, 124.5)
            int ui:nodegraph:node:stackingOrder = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (-0.33015525, -0.9526756, -10.241348)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "PointLight"
            {
                float3 color = (1, 0.88081515, 0.6541668)
                token info:id = "RealityKit.PointLight"
                float intensity = 100000
            }
        }

        def Xform "PointLight_6"
        {
            float2 ui:nodegraph:node:pos = (256, 144.5)
            int ui:nodegraph:node:stackingOrder = 3
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0.86250377, -0.9526756, -10.241348)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "PointLight"
            {
                float3 color = (1, 0.88081515, 0.6541668)
                token info:id = "RealityKit.PointLight"
                float intensity = 100000
            }
        }

        def Xform "PointLight_7"
        {
            float2 ui:nodegraph:node:pos = (276, 164.5)
            int ui:nodegraph:node:stackingOrder = 4
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (1.7023833, -0.9526757, -10.241348)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "PointLight"
            {
                float3 color = (0.8076743, 1, 0.9545373)
                token info:id = "RealityKit.PointLight"
                float intensity = 100000
            }
        }
    }

    def "Theatre" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (1.5707964, 0, 0)
        }
        references = @Theatre.usdc@
    )
    {
        rel material:binding = </Root/Theatre/_materials/Material> (
            bindMaterialAs = "weakerThanDescendants"
        )
        quatf xformOp:orient = (0.70710677, 0.70710677, 0, 0)
        float3 xformOp:scale = (0.7, 0.7, 0.7)
        float3 xformOp:translate = (0, 3.6242728, 6.7055225e-7)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "env_light" (
            active = false
        )
        {
            def DomeLight "env_light" (
                prepend references = </Root/Theatre/env_light>
            )
            {
                float inputs:intensity = 1
                asset inputs:texture:file = @./textures/color_121212.hdr@
                float2 ui:nodegraph:node:pos = (20, 20)
                int ui:nodegraph:node:stackingOrder = 1
                quatf xformOp:orient = (0.99999994, -1.8280641e-16, -3.580282e-8, -1.9786737e-16)
                float3 xformOp:rotateXYZ = (90, 0, 90)
                float3 xformOp:scale = (0.9999998, 0.9999998, 0.9999998)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }
        }

        over "_materials"
        {
            over "Material"
            {
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)

                over "Principled_BSDF"
                {
                    float inputs:clearcoatRoughness = 1
                    color3f inputs:diffuseColor = (0.19450709, 0.024973257, 0.04623487) (
                        colorSpace = "srgb_texture"
                    )
                    float inputs:roughness = 1
                    float inputs:specular = 0.2
                }
            }

            over "TheatreWall"
            {
                over "Principled_BSDF"
                {
                    color3f inputs:diffuseColor = (0.071158886, 0.039066307, 0.041106366) (
                        colorSpace = "srgb_texture"
                    )
                    float inputs:roughness = 1
                    float inputs:specular = 0.2
                }
            }
        }

        over "Cube_001"
        {
            def RealityKitComponent "ImageBasedLightReceiver"
            {
                rel iblEntity = </Root/IBL>
                uniform token info:id = "RealityKit.ImageBasedLightReceiver"
            }
        }

        over "Cube_002"
        {
            def RealityKitComponent "ImageBasedLightReceiver"
            {
                rel iblEntity = </Root/IBL>
                uniform token info:id = "RealityKit.ImageBasedLightReceiver"
            }
        }

        over "Cube_003"
        {
            def RealityKitComponent "ImageBasedLightReceiver"
            {
                rel iblEntity = </Root/IBL>
                uniform token info:id = "RealityKit.ImageBasedLightReceiver"
            }
        }

        over "Cube_005"
        {
            def RealityKitComponent "ImageBasedLightReceiver"
            {
                rel iblEntity = </Root/IBL>
                uniform token info:id = "RealityKit.ImageBasedLightReceiver"
            }
        }

        over "Cube"
        {
            def RealityKitComponent "ImageBasedLightReceiver"
            {
                rel iblEntity = </Root/IBL>
                uniform token info:id = "RealityKit.ImageBasedLightReceiver"
            }
        }

        over "Cube_004"
        {
            def RealityKitComponent "ImageBasedLightReceiver"
            {
                rel iblEntity = </Root/IBL>
                uniform token info:id = "RealityKit.ImageBasedLightReceiver"
            }
        }
    }

    def Xform "IBL" (
        active = true
    )
    {
        def RealityKitComponent "ImageBasedLight"
        {
            token blendMode = "single"
            bool enableBlend = 0
            asset ibl = @../heartLight_M_heartLight_metallic.jpg@
            uniform token info:id = "RealityKit.ImageBasedLight"
            float intensityExponent = -15
            bool isGlobalIBL = 0
        }
    }
}

